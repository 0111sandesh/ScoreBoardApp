<!DOCTYPE html>
<!-- saved from url=(0037)http://requirejs.org/docs/node.html#2 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    <title>RequireJS in Node</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">

    <link rel="stylesheet" type="text/css" href="./RequireJS in Node_files/main.css">
    <link rel="icon" type="image/x-icon" href="http://requirejs.org/favicon.png">
    <!--[if IE]> <link rel="stylesheet" type="text/css" href="../ie.css" /> <![endif]-->
    <link rel="stylesheet" type="text/css" href="./RequireJS in Node_files/highlight.css">

    <script type="text/javascript" src="./RequireJS in Node_files/jquery.min.js"></script>
    <script type="text/javascript" src="./RequireJS in Node_files/init.js"></script>
    <script src="./RequireJS in Node_files/dojo.xd.js"></script>
    <script type="text/javascript">
        dojo.require("dojox.highlight");
        dojo.require("dojox.highlight.languages.javascript");
        dojo.require("dojox.highlight.languages.html");
        dojo.ready(function() {
            dojo.query("pre > code")
                .forEach(function(node) {
                    if (node.innerHTML.indexOf("DOCTYPE") !== -1 || node.innerHTML.indexOf('&lt;script') !== -1) {
                        dojo.addClass(node, "html");
                    } else {
                        dojo.addClass(node, "javascript");
                    }
                })
                .forEach(dojox.highlight.init);
        });
    </script><script type="text/javascript" charset="utf-8" src="./RequireJS in Node_files/highlight.xd.js"></script><script type="text/javascript" charset="utf-8" src="./RequireJS in Node_files/javascript.xd.js"></script><script type="text/javascript" charset="utf-8" src="./RequireJS in Node_files/html.xd.js"></script>
<script type="text/javascript" charset="utf-8" src="./RequireJS in Node_files/_base.xd.js"></script><script type="text/javascript" charset="utf-8" src="./RequireJS in Node_files/xml.xd.js"></script></head>
<body>
<div id="grid" style="display: none; min-height: 682px;"></div>
<div id="wrapper" style="min-height: 682px;">

    <div id="navBg" style="min-height: 682px;"></div>
    <button type="button" role="button" aria-label="Toggle Navigation" class="off-canvas-button">
      <span class="lines">
        <span class="line">&nbsp;</span>
        <span class="line">&nbsp;</span>
        <span class="line">&nbsp;</span>
      </span>
      <span class="cross">×</span>
    </button>
    <div id="nav" class="mono">
        <a class="homeImageLink" href="http://requirejs.org/"></a>
        <h1>a javascript module loader</h1>

        <ul>
            <li class="hbox">
                <a href="http://requirejs.org/">Home</a>
                <span class="spacer boxFlex"></span>
                <span class="icon home"></span>
            </li>
        </ul>

        <ul>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/start.html">Start</a>
                <span class="spacer boxFlex"></span>
                <span class="icon start"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/download.html">Download</a>
                <span class="spacer boxFlex"></span>
                <span class="icon download"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/api.html">API</a>
                <span class="spacer boxFlex"></span>
                <span class="icon api"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/optimization.html">Optimization</a>
                <span class="spacer boxFlex"></span>
                <span class="icon optimize"></span>
            </li>
        </ul>

        <ul>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/jquery.html">Use with jQuery</a>
                <span class="spacer boxFlex"></span>
                <span class="icon script"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/node.html">Use with Node</a>
                <span class="spacer boxFlex"></span>
                <span class="icon script"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/dojo.html">Use with Dojo</a>
                <span class="spacer boxFlex"></span>
                <span class="icon script"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/commonjs.html">CommonJS Notes</a>
                <span class="spacer boxFlex"></span>
                <span class="icon script"></span>
            </li>
        </ul>

        <ul>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/faq.html">FAQs</a>
                <span class="spacer boxFlex"></span>
                <span class="icon question"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/errors.html">Common Errors</a>
                <span class="spacer boxFlex"></span>
                <span class="icon question"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/plugins.html">Writing Plugins</a>
                <span class="spacer boxFlex"></span>
                <span class="icon api"></span>
            </li>
        </ul>

        <ul>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/why.html">Why Web Modules</a>
                <span class="spacer boxFlex"></span>
                <span class="icon question"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/whyamd.html">Why AMD</a>
                <span class="spacer boxFlex"></span>
                <span class="icon question"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/requirements.html">Requirements</a>
                <span class="spacer boxFlex"></span>
                <span class="icon requirement"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/history.html">History</a>
                <span class="spacer boxFlex"></span>
                <span class="icon history"></span>
            </li>
        </ul>

        <ul>
            <li class="hbox">
                <a href="https://stackoverflow.com/questions/tagged/requirejs">Get Help</a>
                <span class="spacer boxFlex"></span>
                <span class="icon help"></span>
            </li>
            <li class="hbox">
                <a href="http://jrburke.com/">Blog</a>
                <span class="spacer boxFlex"></span>
                <span class="icon blog"></span>
            </li>
            <li class="hbox">
                <a href="http://twitter.com/jrburke">Twitter</a>
                <span class="spacer boxFlex"></span>
                <span class="icon twitter"></span>
            </li>
        </ul>

        <ul>
            <li class="hbox">
                <a href="http://github.com/requirejs/requirejs">GitHub</a>
                <span class="spacer boxFlex"></span>
                <span class="icon git"></span>
            </li>
            <li class="hbox">
                <a class="local" href="http://requirejs.org/docs/contributing.html">Contributing</a>
                <span class="spacer boxFlex"></span>
                <span class="icon fork"></span>
            </li>
        </ul>


        <ul>
            <li class="version">2.2.0 Docs (<a href="https://github.com/requirejs/requirejs/wiki/Upgrading-to-RequireJS-2.1">upgrade info</a>)</li>
            <li class="version"><a class="local" href="http://requirejs.org/docs/1.0/">1.0 Doc Link</a></li>
        </ul>

    </div>

    <div id="content" style="min-height: 514px;"><div id="directory" class="section">
<h1>RequireJS in Node</h1>

    <ul class="index mono">
        <li class="hbox">
            <a href="http://requirejs.org/docs/node.html#1">Doesn't Node already have a module loader?</a><span class="spacer boxFlex"></span><span class="sect">§ 1</span>
        </li>
        <li class="hbox">
            <a href="http://requirejs.org/docs/node.html#2">Can I use server modules written in the CommonJS module format?</a><span class="spacer boxFlex"></span><span class="sect">§ 2</span>
        </li>
        <li class="hbox">
            <a href="http://requirejs.org/docs/node.html#3">How do I use it?</a><span class="spacer boxFlex"></span><span class="sect">§ 3</span>
        </li>
    </ul>

</div>

<div class="section">
<h2>
<a name="1">Doesn't Node already have a module loader?</a>
<span class="sectionMark">§ 1</span>
</h2>

<p>Yes <a href="http://nodejs.org/">Node</a> does. That loader uses the CommonJS module format. The CommonJS module format is <a href="http://requirejs.org/docs/why.html">non-optimal for the browser</a>, and I do not agree with <a href="http://tagneto.blogspot.com/2010/03/commonjs-module-trade-offs.html">some of the trade-offs made in the CommonJS module format</a>. By using RequireJS on the server, you can use one format for all your modules, whether they are running server side or in the browser. That way you can preserve the speed benefits and easy debugging you get with RequireJS in the browser, and not have to worry about extra translation costs for moving between two formats.</p>

<p>If you want to use define() for your modules but still run them in Node without needing to run RequireJS on the server, see <a href="http://requirejs.org/docs/node.html#nodeModules">the section below</a> about using <a href="https://github.com/jrburke/amdefine">amdefine</a>.</p>

</div>

<div class="section">
<h2>
<a name="2">Can I use Node modules already written in the CommonJS module format?</a>
<span class="sectionMark">§ 2</span></h2>

<p>Yes! The Node adapter for RequireJS, called r.js, will use Node's implementation of require and Node's search paths if the module is not found with the configuration used by RequireJS, so you can continue to use your existing Node-based modules without having to do changes to them.</p>

<p>RequireJS will use its <a href="http://requirejs.org/docs/api.html#config">Configuration Options</a> first to find modules. If RequireJS cannot find the module with its configuration, it is assumed to be a module that uses Node's type of modules and configuration. So, only configure module locations with RequireJS if they use the RequireJS API. For modules that expect Node's APIs and configuration/paths, just install them with a Node package manager, like <a href="http://npmjs.org/">npm</a>, and do not configure their locations with RequireJS.</p>

<p><strong>Best practice</strong>: Use npm to install Node-only packages/modules into the projects <strong>node_modules</strong> directory, but do not configure RequireJS to look inside the node_modules directory. Also avoid using relative module IDs to reference modules that are Node-only modules. So, <strong>do not</strong> do something like <strong>require("./node_modules/foo/foo")</strong>.</p>

<p>Other notes:</p>

<ul>
    <li>RequireJS in Node can only load modules that are on the local disk -- fetching modules across http, for instance, is not supported at this time.</li>
    <li>RequireJS config options like map, packages, paths are only applied if RequireJS loads the module. If RequireJS needs to ask the node module system, the original ID is passed to Node. If you need a node module to work with a map config, inline define() calls work, as shown in <a href="https://groups.google.com/forum/#!msg/requirejs/ur_UQLr04rc/sSpM8y87VNMJ">this email list thread.</a></li>
</ul>

</div>

<div class="section">
<h2>
<a name="3">How do I use it?</a>
<span class="sectionMark">§ 3</span>
</h2>

<p>There are two ways to get the Node adapter:</p>

<h3 id="npm">npm</h3>
<p>Use <a href="http://npmjs.org/">npm</a> to install it:</p>

<pre><code class="javascript">npm install requirejs
</code></pre>

<p>This option will install the latest release.</p>

<h3 id="rjs">Download r.js</h3>

<p>If you prefer to not use npm, you can get r.js directly:</p>

<ul>
    <li>Download r.js from the <a href="http://requirejs.org/docs/download.html#rjs">the download page</a> and place it in your project.</li>
    <li>Get the source from the <a href="https://github.com/requirejs/r.js">r.js repo</a> and either generate the r.js via "node dist.js", or grab a snapshot from the <strong>dist</strong> directory.</li>
</ul>

<h3 id="usage">Usage</h3><h3>

<p>These instructions assume an npm installation of 'requirejs'. If you are using the r.js file directly, replace  require('requirejs') with require('./path/to/r.js'). Basic usage is:</p>

<ul>
    <li>require('requirejs')</li>
    <li>Pass the main js file's "require" function in the configuration to requirejs.</li>
</ul>

<p>Example:</p>

<pre><code class="javascript"><span class="keyword">var</span> requirejs = require(<span class="string">'requirejs'</span>);

requirejs.config({
    <span class="comment">//Pass the top-level main.js/index.js require</span>
    <span class="comment">//function to requirejs so that node modules</span>
    <span class="comment">//are loaded relative to the top-level JS file.</span>
    nodeRequire: require
});

requirejs([<span class="string">'foo'</span>, <span class="string">'bar'</span>],
<span class="function"><span class="keyword">function</span>   <span class="params">(foo,   bar)</span> {</span>
    <span class="comment">//foo and bar are loaded according to requirejs</span>
    <span class="comment">//config, but if not found, then node's require</span>
    <span class="comment">//is used to load the module.</span>
});
</code></pre>

<p>Be sure to read the <a href="http://requirejs.org/docs/node.html#2">notes in section 2</a> about configuring RequireJS so that it can load node-only modules installed via npm.</p>

<p>To see a more complete example that loads a module via RequireJS but uses Node-native modules for other things, see the <a href="https://github.com/requirejs/r.js/tree/master/tests/node/embedded">embedded test</a> in the r.js repo.</p>

<p><strong>Note:</strong> <code>requirejs([], function() {})</code> will call the function callback asynchronously in RequireJS 2.1+ (for earlier versions it was synchronously called). However, when running in Node, module loading will be loaded using sync IO calls, and loader plugins should resolve calls to their load method synchronously. This allows sync uses of the requirejs module in node to work via requirejs('stringValue') calls:

</p><pre><code class="javascript"><span class="comment">//Retrieves the module value for 'a' synchronously</span>
<span class="keyword">var</span> a = requirejs(<span class="string">'a'</span>)</code></pre>

</h3><h3 id="nodeModules">Building node modules with AMD or RequireJS</h3>

<p>If you want to code a module so that it works with RequireJS and in Node, without requiring users of your library in Node to use RequireJS, then you can use the <a href="https://github.com/jrburke/amdefine">amdefine</a> package to do this:</p>

<pre><code class="javascript"><span class="keyword">if</span> (<span class="keyword">typeof</span> define !== <span class="string">'function'</span>) {
    <span class="keyword">var</span> define = require(<span class="string">'amdefine'</span>)(module);
}

define(<span class="function"><span class="keyword">function</span><span class="params">(require)</span> {</span>
    <span class="keyword">var</span> dep = require(<span class="string">'dependency'</span>);

    <span class="comment">//The value returned from the function is</span>
    <span class="comment">//used as the module export visible to Node.</span>
    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>};
});
</code></pre>

<p>The RequireJS optimizer, as of version 1.0.3, will strip out the use of 'amdefine' above, so it is safe to use this module for your web-based projects too. Just be sure to use <strong>the exact 'amdefine' if() test and contents as shown above</strong>. Differences in spaces/line breaks are allowed. See the <a href="https://github.com/jrburke/amdefine">amdefine project</a> for more information.</p>

<p>If you want to use RequireJS directly to code your module, and then export a module value to node so that it can be used in other Node programs without requiring that app to use RequireJS, you can use the approach listed in the next example.</p>

<p>It is best to set the baseUrl specifically to the directory containing the module, so that it works properly when nested inside a node_modules heirarchy. Use the synchronous <code>requirejs('moduleId')</code> to fetch the module using the config and rules in requirejs, then use Node's module.exports to export your module value:</p>

<pre><code class="javascript"><span class="keyword">var</span> requirejs = require(<span class="string">'requirejs'</span>);

requirejs.config({
    <span class="comment">//Use node's special variable __dirname to</span>
    <span class="comment">//get the directory containing this file.</span>
    <span class="comment">//Useful if building a library that will</span>
    <span class="comment">//be used in node but does not require the</span>
    <span class="comment">//use of node outside</span>
    baseUrl: __dirname,

    <span class="comment">//Pass the top-level main.js/index.js require</span>
    <span class="comment">//function to requirejs so that node modules</span>
    <span class="comment">//are loaded relative to the top-level JS file.</span>
    nodeRequire: require
});

<span class="comment">//foo and bar are loaded according to requirejs</span>
<span class="comment">//config, and if found, assumed to be an AMD module.</span>
<span class="comment">//If they are not found via the requirejs config,</span>
<span class="comment">//then node's require is used to load the module,</span>
<span class="comment">//and if found, the module is assumed to be a</span>
<span class="comment">//node-formatted module. Note: this synchronous</span>
<span class="comment">//style of loading a module only works in Node.</span>
<span class="keyword">var</span> foo = requirejs(<span class="string">'foo'</span>);
<span class="keyword">var</span> bar = requirejs(<span class="string">'bar'</span>);

<span class="comment">//Now export a value visible to Node.</span>
module.exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>};
</code></pre>

<h3 id="optimizer">Using the optimizer as a node module</h3>

<p>The node module also exposes the RequireJS Optimizer as an <strong>optimize</strong> method for using the <a href="http://requirejs.org/docs/optimization.html">RequireJS optimizer</a> via a function call instead of a command line tool:</p>

<pre><code class="javascript"><span class="keyword">var</span> requirejs = require(<span class="string">'requirejs'</span>);

<span class="keyword">var</span> config = {
    baseUrl: <span class="string">'../appDir/scripts'</span>,
    name: <span class="string">'main'</span>,
    out: <span class="string">'../build/main-built.js'</span>
};

requirejs.optimize(config, <span class="function"><span class="keyword">function</span> <span class="params">(buildResponse)</span> {</span>
    <span class="comment">//buildResponse is just a text output of the modules</span>
    <span class="comment">//included. Load the built file for the contents.</span>
    <span class="comment">//Use config.out to get the optimized file contents.</span>
    <span class="keyword">var</span> contents = fs.readFileSync(config.out, <span class="string">'utf8'</span>);
}, <span class="function"><span class="keyword">function</span><span class="params">(err)</span> {</span>
    <span class="comment">//optimization err callback</span>
});
</code></pre>

<p>This allows you to build other optimization workflows, like <a href="https://github.com/requirejs/r.js/tree/master/build/tests/http">a web builder</a> that can be used if you prefer to always develop with the "one script file included before the &lt;/body&gt; tag" approach. The optimizer running in Node is fairly fast, but for larger projects that do not want to regenerate the build for every browser request, but just if you modify a script that is part of the build. You could use Node's fs.watchFile() to watch files and then trigger the build when a file changes.</p>

<h3 id="feedback">Feedback</h3>

<p>If you find you have a problem, and want to report it, use the <a href="http://github.com/requirejs/r.js/issues">r.js GitHub Issues page</a>.</p>
</div>
    </div>
    <div id="footer" class="mono">
        <span class="line">Latest Release: <a href="http://requirejs.org/docs/download.html">2.2.0</a></span>
        <span class="line">Open source: <a href="https://github.com/requirejs/requirejs/blob/master/LICENSE">new BSD or MIT licensed</a></span>
        <span class="line">web design by <a href="http://andychung.me/">Andy Chung</a> © 2011-2015</span>
    </div>
</div>



</body></html>